const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const PerplexityService = require('./services/perplexityService');
const DataService = require('./services/dataService');
const ElevenLabsService = require('./services/elevenLabsService');
const ShortGptService = require('./services/shortGptService');
const PexelsService = require('./services/pexelsService');
const CreatomateService = require('./services/creatomateService');
const VideoPipelineService = require('./services/videoPipelineService');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
const perplexityService = new PerplexityService();
const dataService = new DataService();
const elevenLabsService = new ElevenLabsService();
const shortGptService = new ShortGptService();
const pexelsService = new PexelsService();
const creatomateService = new CreatomateService();
const videoPipelineService = new VideoPipelineService();

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// –ú–∞—Ä—à—Ä—É—Ç—ã API

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.json({
    message: 'AI Video Generator API - Enhanced Pipeline',
    version: '2.0.0',
    status: 'running',
    features: [
      '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Perplexity API',
      '–°–æ–∑–¥–∞–Ω–∏–µ –æ–∑–≤—É—á–∫–∏ —á–µ—Ä–µ–∑ ElevenLabs API',
      '–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Pexels API',
      '–£–º–Ω—ã–π –æ—Ç–±–æ—Ä –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Perplexity',
      '–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Creatomate',
      '–ü–æ–ª–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω'
    ],
    endpoints: {
      // üöÄ –ù–û–í–´–ô –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–ê–ô–ü–õ–ê–ô–ù
      'POST /api/pipeline/generate-full-video': 'üöÄ –ù–û–í–´–ô: –ü–æ–ª–Ω—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω',
      'GET /api/pipeline/status/:videoId': '–°—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ',
      'POST /api/pipeline/check-services': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤',
      
      // Perplexity API
      'POST /api/perplexity/detailed-script': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π',
      'POST /api/perplexity/select-video': '–£–º–Ω—ã–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã',
      
      // Pexels API
      'POST /api/pexels/search': '–ü–æ–∏—Å–∫ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ –≤ Pexels',
      
      // Creatomate API
      'POST /api/creatomate/create-render': '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∞ –≤ Creatomate',
      'GET /api/creatomate/render-status/:renderId': '–°—Ç–∞—Ç—É—Å —Ä–µ–Ω–¥–µ—Ä–∞ –≤ Creatomate',
      
      // –°—Ç–∞—Ä—ã–µ endpoints (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      'POST /api/generate': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)',
      'POST /api/generate-full': '–ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ (–∫–æ–Ω—Ç–µ–Ω—Ç + –æ–∑–≤—É—á–∫–∞)',
      'POST /api/generate-full-video': '–ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ (–∫–æ–Ω—Ç–µ–Ω—Ç + –æ–∑–≤—É—á–∫–∞ + –≤–∏–¥–µ–æ)',
      'POST /api/generate-voiceover/:id': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ',
      
      // ElevenLabs endpoints
      'GET /api/voices': '–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ ElevenLabs',
      'GET /api/audio/:id': '–°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª –æ–∑–≤—É—á–∫–∏',
      
      // ShortGPT endpoints
      'POST /api/shortgpt/check': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ShortGPT',
      'POST /api/shortgpt/install': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ShortGPT',
      'POST /api/shortgpt/config': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ShortGPT',
      'POST /api/shortgpt/create-video/:id': '–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ ShortGPT',
      'GET /api/shortgpt/video/:id': '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ',
      'DELETE /api/shortgpt/video/:id': '–£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ',
      
      // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
      'GET /api/videos': '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ',
      'GET /api/videos/:id': '–ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ ID',
      'GET /api/videos/search/:query': '–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ',
      'GET /api/videos/language/:lang': '–í–∏–¥–µ–æ –ø–æ —è–∑—ã–∫—É',
      'GET /api/videos/topic/:topic': '–í–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ',
      'DELETE /api/videos/:id': '–£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ',
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      'GET /api/stats': '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã'
    },
    usage: {
      // üöÄ –ù–æ–≤—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
      newPipeline: {
        method: 'POST',
        url: '/api/pipeline/generate-full-video',
        body: { 
          topic: '–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Å–º–∞—Ä—Ç—Ñ–æ–Ω', 
          language: 'ru',
          options: {
            templateId: 'your-creatomate-template-id' // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
          }
        },
        description: '–ü–æ–ª–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω: —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Üí –ø–æ–∏—Å–∫ –≤–∏–¥–µ–æ ‚Üí –æ—Ç–±–æ—Ä ‚Üí –∞—É–¥–∏–æ ‚Üí —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ'
      },
      
      // –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      generate: {
        method: 'POST',
        url: '/api/generate',
        body: { topic: '–≤–∞—à–∞ —Ç–µ–º–∞', language: 'ru' }
      }
    },
    pipeline: {
      stages: [
        '1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —á–µ—Ä–µ–∑ Perplexity',
        '2. –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã —á–µ—Ä–µ–∑ Pexels',
        '3. –£–º–Ω—ã–π –æ—Ç–±–æ—Ä –ª—É—á—à–∏—Ö –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Perplexity',
        '4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs',
        '5. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Creatomate'
      ],
      benefits: [
        '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ',
        '–£–º–Ω—ã–π –æ—Ç–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ AI –∞–Ω–∞–ª–∏–∑–∞',
        '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞',
        '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è TikTok/Shorts',
        '–ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞'
      ]
    }
  });
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
app.post('/api/generate', async (req, res) => {
  try {
    const { topic, language = 'ru' } = req.body;

    if (!topic) {
      return res.status(400).json({
        error: '–¢–µ–º–∞ –≤–∏–¥–µ–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞',
        status: 'error'
      });
    }

    console.log(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${topic} (${language})`);
    
    const result = await perplexityService.generateVideoContent(topic, language);
    
    if (result.status === 'error') {
      return res.status(500).json(result);
    }

    const savedVideo = await dataService.saveVideo(result);
    
    res.json({
      ...savedVideo,
      message: '–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω'
    });

  } catch (error) {
    console.error('Error in /api/generate:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ (–∫–æ–Ω—Ç–µ–Ω—Ç + –æ–∑–≤—É—á–∫–∞)
app.post('/api/generate-full', async (req, res) => {
  try {
    const { topic, language = 'ru', generateVoiceover = true } = req.body;

    if (!topic) {
      return res.status(400).json({
        error: '–¢–µ–º–∞ –≤–∏–¥–µ–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞',
        status: 'error'
      });
    }

    console.log(`–ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ: ${topic} (${language})`);
    
    // –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    const contentResult = await perplexityService.generateVideoContent(topic, language);
    
    if (contentResult.status === 'error') {
      return res.status(500).json(contentResult);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const savedVideo = await dataService.saveVideo(contentResult);

    let voiceoverData = null;

    // –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–∑–≤—É—á–∫—É (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ)
    if (generateVoiceover && contentResult.voiceoverText) {
      try {
        console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏...');
        voiceoverData = await elevenLabsService.generateAndSaveVoiceover(
          contentResult.voiceoverText,
          savedVideo.id,
          language
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–∑–≤—É—á–∫–∏
        await dataService.updateVideo(savedVideo.id, {
          voiceover: {
            filename: voiceoverData.filename,
            filePath: voiceoverData.filePath,
            fileSize: voiceoverData.fileSize,
            voiceId: voiceoverData.voiceId,
            generatedAt: voiceoverData.generatedAt
          }
        });

        console.log('–û–∑–≤—É—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
      } catch (voiceoverError) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–∑–≤—É—á–∫–∏:', voiceoverError.message);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –æ–∑–≤—É—á–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
    const finalVideo = await dataService.getVideoById(savedVideo.id);
    
    res.json({
      ...finalVideo,
      message: '–í–∏–¥–µ–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ',
      voiceoverGenerated: !!voiceoverData
    });

  } catch (error) {
    console.error('Error in /api/generate-full:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –æ–∑–≤—É—á–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ
app.post('/api/generate-voiceover/:videoId', async (req, res) => {
  try {
    const { videoId } = req.params;
    const { language = 'ru' } = req.body;

    // –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ
    const video = await dataService.getVideoById(videoId);
    if (!video) {
      return res.status(404).json({
        error: '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        status: 'error'
      });
    }

    if (!video.voiceoverText) {
      return res.status(400).json({
        error: '–£ –≤–∏–¥–µ–æ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏',
        status: 'error'
      });
    }

    console.log(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ: ${video.title}`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–∑–≤—É—á–∫—É
    const voiceoverData = await elevenLabsService.generateAndSaveVoiceover(
      video.voiceoverText,
      videoId,
      language
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–∑–≤—É—á–∫–∏
    const updatedVideo = await dataService.updateVideo(videoId, {
      voiceover: {
        filename: voiceoverData.filename,
        filePath: voiceoverData.filePath,
        fileSize: voiceoverData.fileSize,
        voiceId: voiceoverData.voiceId,
        generatedAt: voiceoverData.generatedAt
      }
    });

    res.json({
      video: updatedVideo,
      voiceover: voiceoverData,
      message: '–û–∑–≤—É—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞'
    });

  } catch (error) {
    console.error('Error in /api/generate-voiceover:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ ElevenLabs
app.get('/api/voices', async (req, res) => {
  try {
    const voices = await elevenLabsService.getVoices();
    res.json({
      voices: voices.voices,
      count: voices.voices.length,
      status: 'success'
    });
  } catch (error) {
    console.error('Error in /api/voices:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª –æ–∑–≤—É—á–∫–∏
app.get('/api/audio/:videoId', async (req, res) => {
  try {
    const { videoId } = req.params;
    
    const video = await dataService.getVideoById(videoId);
    if (!video || !video.voiceover) {
      return res.status(404).json({
        error: '–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω',
        status: 'error'
      });
    }

    const audioPath = video.voiceover.filePath;
    
    if (!fs.existsSync(audioPath)) {
      return res.status(404).json({
        error: '–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ',
        status: 'error'
      });
    }

    res.download(audioPath, video.voiceover.filename);

  } catch (error) {
    console.error('Error in /api/audio:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ
app.get('/api/videos', async (req, res) => {
  try {
    const videos = await dataService.getAllVideos();
    res.json({
      videos,
      count: videos.length,
      status: 'success'
    });
  } catch (error) {
    console.error('Error in /api/videos:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ ID
app.get('/api/videos/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const video = await dataService.getVideoById(id);
    
    if (!video) {
      return res.status(404).json({
        error: '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        status: 'error'
      });
    }

    res.json({
      video,
      status: 'success'
    });
  } catch (error) {
    console.error('Error in /api/videos/:id:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ
app.get('/api/videos/search/:query', async (req, res) => {
  try {
    const { query } = req.params;
    const videos = await dataService.searchVideos(query);
    
    res.json({
      videos,
      count: videos.length,
      query,
      status: 'success'
    });
  } catch (error) {
    console.error('Error in /api/videos/search:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// –í–∏–¥–µ–æ –ø–æ —è–∑—ã–∫—É
app.get('/api/videos/language/:lang', async (req, res) => {
  try {
    const { lang } = req.params;
    const videos = await dataService.getVideosByLanguage(lang);
    
    res.json({
      videos,
      count: videos.length,
      language: lang,
      status: 'success'
    });
  } catch (error) {
    console.error('Error in /api/videos/language:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// –í–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ
app.get('/api/videos/topic/:topic', async (req, res) => {
  try {
    const { topic } = req.params;
    const videos = await dataService.getVideosByTopic(topic);
    
    res.json({
      videos,
      count: videos.length,
      topic,
      status: 'success'
    });
  } catch (error) {
    console.error('Error in /api/videos/topic:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–¥–µ–æ
app.put('/api/videos/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = req.body;
    
    const updatedVideo = await dataService.updateVideo(id, updateData);
    
    res.json({
      video: updatedVideo,
      message: '–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
      status: 'success'
    });
  } catch (error) {
    console.error('Error in PUT /api/videos/:id:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ
app.delete('/api/videos/:id', async (req, res) => {
  try {
    const { id } = req.params;
    await dataService.deleteVideo(id);
    
    res.json({
      message: '–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ',
      status: 'success'
    });
  } catch (error) {
    console.error('Error in DELETE /api/videos/:id:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get('/api/stats', async (req, res) => {
  try {
    const videos = await dataService.getAllVideos();
    
    const stats = {
      totalVideos: videos.length,
      languages: {},
      topics: {},
      recentVideos: videos
        .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
        .slice(0, 5)
    };

    // –ü–æ–¥—Å—á–µ—Ç –ø–æ —è–∑—ã–∫–∞–º
    videos.forEach(video => {
      const lang = video.language || 'unknown';
      stats.languages[lang] = (stats.languages[lang] || 0) + 1;
    });

    // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–µ–º–∞–º (–ø–µ—Ä–≤—ã–µ 10)
    const topicCounts = {};
    videos.forEach(video => {
      const topic = video.topic || 'unknown';
      topicCounts[topic] = (topicCounts[topic] || 0) + 1;
    });
    
    stats.topTopics = Object.entries(topicCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 10)
      .map(([topic, count]) => ({ topic, count }));

    res.json({
      stats,
      status: 'success'
    });
  } catch (error) {
    console.error('Error in /api/stats:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// ==================== SHORTGPT ENDPOINTS ====================

// POST /api/shortgpt/check - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ShortGPT
app.post('/api/shortgpt/check', async (req, res) => {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ShortGPT...');
    
    const isAvailable = await shortGptService.checkShortGptAvailability();
    
    res.json({
      available: isAvailable,
      message: isAvailable ? 'ShortGPT –¥–æ—Å—Ç—É–ø–µ–Ω' : 'ShortGPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      status: 'success'
    });
  } catch (error) {
    console.error('Error checking ShortGPT:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// POST /api/shortgpt/install - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ShortGPT
app.post('/api/shortgpt/install', async (req, res) => {
  try {
    console.log('üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ShortGPT...');
    
    await shortGptService.installDependencies();
    
    res.json({
      message: '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ShortGPT —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã',
      status: 'success'
    });
  } catch (error) {
    console.error('Error installing ShortGPT dependencies:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// POST /api/shortgpt/config - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ShortGPT
app.post('/api/shortgpt/config', async (req, res) => {
  try {
    const config = req.body;
    console.log('üîß –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ShortGPT...');
    
    await shortGptService.updateConfig(config);
    
    res.json({
      message: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ShortGPT –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      status: 'success'
    });
  } catch (error) {
    console.error('Error updating ShortGPT config:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// POST /api/shortgpt/create-video/:videoId - –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ ShortGPT
app.post('/api/shortgpt/create-video/:videoId', async (req, res) => {
  try {
    const { videoId } = req.params;
    const { scriptText, options = {} } = req.body;
    
    if (!scriptText) {
      return res.status(400).json({
        error: '–¢–µ–∫—Å—Ç —Å–∫—Ä–∏–ø—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        status: 'error'
      });
    }
    
    console.log(`üé¨ –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ ShortGPT –¥–ª—è ID: ${videoId}`);
    
    const result = await shortGptService.createVideo(scriptText, videoId, options);
    
    if (result.success) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const video = dataService.getVideoById(videoId);
      if (video) {
        dataService.updateVideo(videoId, {
          videoFile: path.basename(result.videoPath),
          videoPath: result.videoPath,
          videoGeneratedAt: new Date().toISOString(),
          videoSize: result.fileSize
        });
      }
      
      res.json({
        message: '–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ',
        videoId: result.videoId,
        videoPath: result.videoPath,
        fileSize: result.fileSize,
        status: 'success'
      });
    } else {
      res.status(500).json({
        error: result.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ',
        status: 'error'
      });
    }
  } catch (error) {
    console.error('Error creating video with ShortGPT:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// GET /api/shortgpt/video/:videoId - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
app.get('/api/shortgpt/video/:videoId', async (req, res) => {
  try {
    const { videoId } = req.params;
    
    const videoInfo = await shortGptService.getVideoInfo(videoId);
    
    res.json({
      videoId: videoId,
      ...videoInfo,
      status: 'success'
    });
  } catch (error) {
    console.error('Error getting video info:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// DELETE /api/shortgpt/video/:videoId - –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
app.delete('/api/shortgpt/video/:videoId', async (req, res) => {
  try {
    const { videoId } = req.params;
    
    const deleted = await shortGptService.deleteVideo(videoId);
    
    res.json({
      message: deleted ? '–í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ' : '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
      deleted: deleted,
      status: 'success'
    });
  } catch (error) {
    console.error('Error deleting video:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// POST /api/generate-full-video - –ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: –∫–æ–Ω—Ç–µ–Ω—Ç + –æ–∑–≤—É—á–∫–∞ + –≤–∏–¥–µ–æ
app.post('/api/generate-full-video', async (req, res) => {
  try {
    const { topic, language = 'ru', options = {} } = req.body;
    
    if (!topic) {
      return res.status(400).json({
        error: '–¢–µ–º–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞',
        status: 'error'
      });
    }
    
    console.log(`üé¨ –ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ: ${topic} (${language})`);
    
    // –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    console.log('üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç...');
    const contentResult = await perplexityService.generateVideoContent(topic, language);
    
    // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const videoId = dataService.generateId();
    const videoData = {
      id: videoId,
      topic: topic,
      language: language,
      title: contentResult.title.content,
      description: contentResult.description.content,
      script: contentResult.script.content,
      keywords: contentResult.keywords.content,
      voiceoverText: contentResult.voiceoverText.content,
      thinking: {
        title: contentResult.title.thinking,
        description: contentResult.description.thinking,
        script: contentResult.script.thinking,
        keywords: contentResult.keywords.thinking,
        voiceoverText: contentResult.voiceoverText.thinking
      },
      createdAt: new Date().toISOString(),
      status: 'content_generated'
    };
    
    dataService.saveVideo(videoData);
    console.log(`Video saved with ID: ${videoId}`);
    
    // –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏
    console.log('üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–∑–≤—É—á–∫—É...');
    const voiceoverResult = await elevenLabsService.generateAndSaveVoiceover(
      contentResult.voiceoverText.content, 
      videoId, 
      language
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    dataService.updateVideo(videoId, { 
      status: 'voiceover_generated',
      audioFile: voiceoverResult.filename,
      audioPath: voiceoverResult.filePath,
      audioGeneratedAt: voiceoverResult.generatedAt
    });
    
    // –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ ShortGPT
    console.log('üé¨ –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ ShortGPT...');
    const videoResult = await shortGptService.createVideo(
      contentResult.voiceoverText.content, 
      videoId, 
      { language, ...options }
    );
    
    if (videoResult.success) {
      // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
      dataService.updateVideo(videoId, {
        status: 'video_generated',
        videoFile: path.basename(videoResult.videoPath),
        videoPath: videoResult.videoPath,
        videoGeneratedAt: new Date().toISOString(),
        videoSize: videoResult.fileSize
      });
      
      res.json({
        message: '–ü–æ–ª–Ω–æ–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ',
        videoId: videoId,
        content: contentResult,
        voiceover: {
          filename: voiceoverResult.filename,
          fileSize: voiceoverResult.fileSize
        },
        video: {
          path: videoResult.videoPath,
          fileSize: videoResult.fileSize
        },
        status: 'success'
      });
    } else {
      res.status(500).json({
        error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ',
        videoId: videoId,
        content: contentResult,
        voiceover: {
          filename: voiceoverResult.filename,
          fileSize: voiceoverResult.fileSize
        },
        status: 'error'
      });
    }
    
  } catch (error) {
    console.error('Error in full video generation:', error);
    res.status(500).json({
      error: error.message,
      status: 'error'
    });
  }
});

// ==================== –ù–û–í–´–ï ENDPOINTS –î–õ–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê ====================

// POST /api/pipeline/generate-full-video - –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
app.post('/api/pipeline/generate-full-video', async (req, res) => {
  try {
    const { topic, language = 'ru', options = {} } = req.body;

    if (!topic) {
      return res.status(400).json({
        error: '–¢–µ–º–∞ –≤–∏–¥–µ–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞',
        status: 'error'
      });
    }

    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è —Ç–µ–º—ã: ${topic}`);
    
    const result = await videoPipelineService.generateFullVideo(topic, language, options);
    
    if (result.success) {
      res.json({
        success: true,
        videoId: result.videoId,
        videoUrl: result.videoUrl,
        audioUrl: result.audioUrl,
        duration: result.duration,
        message: '–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω'
      });
    } else {
      res.status(500).json({
        success: false,
        error: result.error,
        videoId: result.videoId
      });
    }
  } catch (error) {
    console.error('Error in full pipeline:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      status: 'error'
    });
  }
});

// GET /api/pipeline/status/:videoId - –°—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ
app.get('/api/pipeline/status/:videoId', async (req, res) => {
  try {
    const { videoId } = req.params;
    
    const result = await videoPipelineService.getVideoStatus(videoId);
    
    if (result.success) {
      res.json(result);
    } else {
      res.status(404).json(result);
    }
  } catch (error) {
    console.error('Error getting video status:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      status: 'error'
    });
  }
});

// POST /api/pipeline/check-services - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
app.post('/api/pipeline/check-services', async (req, res) => {
  try {
    const result = await videoPipelineService.checkAllServices();
    res.json(result);
  } catch (error) {
    console.error('Error checking services:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      status: 'error'
    });
  }
});

// POST /api/pexels/search - –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –≤ Pexels
app.post('/api/pexels/search', async (req, res) => {
  try {
    const { query, options = {} } = req.body;

    if (!query) {
      return res.status(400).json({
        error: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        status: 'error'
      });
    }

    const result = await pexelsService.searchVideos(query, options);
    res.json(result);
  } catch (error) {
    console.error('Error searching Pexels:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      status: 'error'
    });
  }
});

// POST /api/creatomate/create-render - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∞ –≤ Creatomate
app.post('/api/creatomate/create-render', async (req, res) => {
  try {
    const { templateId, modifications } = req.body;

    if (!templateId || !modifications) {
      return res.status(400).json({
        error: 'templateId –∏ modifications –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
        status: 'error'
      });
    }

    const result = await creatomateService.createRender(templateId, modifications);
    res.json(result);
  } catch (error) {
    console.error('Error creating Creatomate render:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      status: 'error'
    });
  }
});

// GET /api/creatomate/render-status/:renderId - –°—Ç–∞—Ç—É—Å —Ä–µ–Ω–¥–µ—Ä–∞ –≤ Creatomate
app.get('/api/creatomate/render-status/:renderId', async (req, res) => {
  try {
    const { renderId } = req.params;
    
    const result = await creatomateService.getRenderStatus(renderId);
    res.json(result);
  } catch (error) {
    console.error('Error getting render status:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      status: 'error'
    });
  }
});

// POST /api/perplexity/detailed-script - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
app.post('/api/perplexity/detailed-script', async (req, res) => {
  try {
    const { topic, language = 'ru' } = req.body;

    if (!topic) {
      return res.status(400).json({
        error: '–¢–µ–º–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞',
        status: 'error'
      });
    }

    const result = await perplexityService.generateDetailedScript(topic, language);
    res.json(result);
  } catch (error) {
    console.error('Error generating detailed script:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      status: 'error'
    });
  }
});

// POST /api/perplexity/select-video - –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã
app.post('/api/perplexity/select-video', async (req, res) => {
  try {
    const { scene, videoOptions } = req.body;

    if (!scene || !videoOptions) {
      return res.status(400).json({
        error: 'scene –∏ videoOptions –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
        status: 'error'
      });
    }

    const result = await perplexityService.selectBestVideo(scene, videoOptions);
    res.json(result);
  } catch (error) {
    console.error('Error selecting video:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      status: 'error'
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ 404
app.use('*', (req, res) => {
  res.status(404).json({
    error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    status: 'error'
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error('Global error handler:', error);
  res.status(500).json({
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    status: 'error'
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
  console.log(`üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:${PORT}/`);
  console.log(`\nüîß –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:`);
  console.log(`   POST http://localhost:${PORT}/api/generate`);
  console.log(`   Body: {"topic": "–≤–∞—à–∞ —Ç–µ–º–∞", "language": "ru"}`);
});

module.exports = app;
