const axios = require('axios');

async function testElevenLabsDirect() {
  const apiKey = 'sk_51b2f83ecfd251cfa0886d30158507d2c56b86ac3596660b';
  const baseUrl = 'https://api.elevenlabs.io/v1';
  
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º ElevenLabs API –Ω–∞–ø—Ä—è–º—É—é...');
  console.log('üîë API –∫–ª—é—á:', apiKey.substring(0, 10) + '...');
  console.log('üåê –ë–∞–∑–æ–≤—ã–π URL:', baseUrl);
  
  try {
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤
    console.log('\nüìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤...');
    const voicesResponse = await axios.get(`${baseUrl}/voices`, {
      headers: {
        'xi-api-key': apiKey
      },
      timeout: 30000,
      maxRedirects: 5
    });
    
    console.log('‚úÖ –ì–æ–ª–æ—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –°—Ç–∞—Ç—É—Å:', voicesResponse.status);
    console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤:', voicesResponse.data.voices?.length || 0);
    
    if (voicesResponse.data.voices && voicesResponse.data.voices.length > 0) {
      console.log('üé§ –ü–µ—Ä–≤—ã–π –≥–æ–ª–æ—Å:', voicesResponse.data.voices[0].name);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤:');
    console.error('   –°—Ç–∞—Ç—É—Å:', error.response?.status);
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('   URL:', error.config?.url);
    if (error.response?.data) {
      console.error('   –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
    }
  }
  
  try {
    // –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏
    console.log('\nüé§ –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏...');
    const text = '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç ElevenLabs API.';
    const voiceId = 'pNInz6obpgDQGcFmaJgB'; // Adam voice
    
    const speechResponse = await axios.post(`${baseUrl}/text-to-speech/${voiceId}`, {
      text: text,
      model_id: 'eleven_multilingual_v2',
      voice_settings: {
        stability: 0.75,
        similarity_boost: 0.85,
        style: 0.0,
        use_speaker_boost: true
      }
    }, {
      headers: {
        'xi-api-key': apiKey,
        'Content-Type': 'application/json'
      },
      responseType: 'arraybuffer',
      timeout: 60000,
      maxRedirects: 5
    });
    
    console.log('‚úÖ –†–µ—á—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –°—Ç–∞—Ç—É—Å:', speechResponse.status);
    console.log('üìä –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ:', speechResponse.data.length, '–±–∞–π—Ç');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏:');
    console.error('   –°—Ç–∞—Ç—É—Å:', error.response?.status);
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('   URL:', error.config?.url);
    if (error.response?.data) {
      console.error('   –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', error.response.data);
    }
  }
}

testElevenLabsDirect();
