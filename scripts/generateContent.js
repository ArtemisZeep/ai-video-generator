#!/usr/bin/env node

const readline = require('readline');
const PerplexityService = require('../services/perplexityService');
const DataService = require('../services/dataService');

class ContentGenerator {
  constructor() {
    this.perplexityService = new PerplexityService();
    this.dataService = new DataService();
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }

  async askQuestion(question) {
    return new Promise((resolve) => {
      this.rl.question(question, (answer) => {
        resolve(answer.trim());
      });
    });
  }

  async selectLanguage() {
    console.log('\nüåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:');
    console.log('1. –†—É—Å—Å–∫–∏–π (ru)');
    console.log('2. English (en)');
    console.log('3. Espa√±ol (es)');
    console.log('4. Fran√ßais (fr)');
    console.log('5. Deutsch (de)');
    console.log('6. Italiano (it)');
    console.log('7. Portugu√™s (pt)');
    console.log('8. ‰∏≠Êñá (zh)');
    console.log('9. Êó•Êú¨Ë™û (ja)');
    console.log('10. ÌïúÍµ≠Ïñ¥ (ko)');

    const choice = await this.askQuestion('\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —è–∑—ã–∫–∞ (1-10) –∏–ª–∏ –∫–æ–¥ —è–∑—ã–∫–∞: ');
    
    const languageMap = {
      '1': 'ru', '2': 'en', '3': 'es', '4': 'fr', '5': 'de',
      '6': 'it', '7': 'pt', '8': 'zh', '9': 'ja', '10': 'ko'
    };

    return languageMap[choice] || choice.toLowerCase();
  }

  async getVideoTopic() {
    console.log('\nüé¨ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ');
    console.log('=====================================');
    
    const topic = await this.askQuestion('\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≤–∏–¥–µ–æ: ');
    
    if (!topic) {
      console.log('‚ùå –¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!');
      return await this.getVideoTopic();
    }
    
    return topic;
  }

  async generateContent() {
    try {
      console.clear();
      console.log('üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...\n');

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –≤–∏–¥–µ–æ
      const topic = await this.getVideoTopic();
      
      // –í—ã–±–∏—Ä–∞–µ–º —è–∑—ã–∫
      const language = await this.selectLanguage();
      
      console.log(`\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ–º—ã: "${topic}"`);
      console.log(`üåç –Ø–∑—ã–∫: ${language}`);
      console.log('\n‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
      const startTime = Date.now();
      const result = await this.perplexityService.generateVideoContent(topic, language);
      const endTime = Date.now();

      if (result.status === 'error') {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:');
        console.log(result.error);
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const savedVideo = await this.dataService.saveVideo(result);

      // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      console.log('\n‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
      console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${(endTime - startTime) / 1000} —Å–µ–∫—É–Ω–¥`);
      console.log(`üÜî ID –≤–∏–¥–µ–æ: ${savedVideo.id}`);
      
      console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç:');
      console.log('=====================================');
      console.log(`üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: ${result.title}`);
      console.log(`\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n${result.description}`);
      console.log(`\nüîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${result.keywords}`);
      console.log(`\nüìú –°—Ü–µ–Ω–∞—Ä–∏–π:\n${result.script}`);

      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      await this.showAdditionalOptions(savedVideo.id);

    } catch (error) {
      console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
      this.rl.close();
    }
  }

  async showAdditionalOptions(videoId) {
    console.log('\nüîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:');
    console.log('1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ');
    console.log('2. –ù–∞–π—Ç–∏ –≤–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ');
    console.log('3. –ù–∞–π—Ç–∏ –≤–∏–¥–µ–æ –ø–æ —è–∑—ã–∫—É');
    console.log('4. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ');
    console.log('5. –í—ã—Ö–æ–¥');

    const choice = await this.askQuestion('\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ');

    switch (choice) {
      case '1':
        await this.showAllVideos();
        break;
      case '2':
        await this.searchByTopic();
        break;
      case '3':
        await this.searchByLanguage();
        break;
      case '4':
        await this.generateContent();
        break;
      case '5':
        console.log('\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
        process.exit(0);
        break;
      default:
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!');
        await this.showAdditionalOptions(videoId);
    }
  }

  async showAllVideos() {
    try {
      const videos = await this.dataService.getAllVideos();
      
      if (videos.length === 0) {
        console.log('\nüì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ');
        return;
      }

      console.log(`\nüìö –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: ${videos.length}`);
      console.log('=====================================');
      
      videos.forEach((video, index) => {
        console.log(`\n${index + 1}. ${video.title}`);
        console.log(`   –¢–µ–º–∞: ${video.topic}`);
        console.log(`   –Ø–∑—ã–∫: ${video.language}`);
        console.log(`   –°–æ–∑–¥–∞–Ω–æ: ${new Date(video.createdAt).toLocaleString()}`);
        console.log(`   ID: ${video.id}`);
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ:', error.message);
    }
  }

  async searchByTopic() {
    const topic = await this.askQuestion('\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞: ');
    if (!topic) return;

    try {
      const videos = await this.dataService.searchVideos(topic);
      
      if (videos.length === 0) {
        console.log('\nüîç –í–∏–¥–µ–æ –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      console.log(`\nüîç –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: ${videos.length}`);
      videos.forEach((video, index) => {
        console.log(`\n${index + 1}. ${video.title}`);
        console.log(`   –¢–µ–º–∞: ${video.topic}`);
        console.log(`   –Ø–∑—ã–∫: ${video.language}`);
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:', error.message);
    }
  }

  async searchByLanguage() {
    const language = await this.askQuestion('\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —è–∑—ã–∫–∞ (ru, en, es, etc.): ');
    if (!language) return;

    try {
      const videos = await this.dataService.getVideosByLanguage(language);
      
      if (videos.length === 0) {
        console.log(`\nüîç –í–∏–¥–µ–æ –Ω–∞ —è–∑—ã–∫–µ ${language} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        return;
      }

      console.log(`\nüåç –í–∏–¥–µ–æ –Ω–∞ —è–∑—ã–∫–µ ${language}: ${videos.length}`);
      videos.forEach((video, index) => {
        console.log(`\n${index + 1}. ${video.title}`);
        console.log(`   –¢–µ–º–∞: ${video.topic}`);
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
if (require.main === module) {
  const generator = new ContentGenerator();
  generator.generateContent().catch(console.error);
}

module.exports = ContentGenerator;
