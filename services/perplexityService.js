const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');

class PerplexityService {
  constructor() {
    this.apiKeys = this.loadApiKeys();
    this.currentKeyIndex = 0;
  }

  loadApiKeys() {
    try {
      const keysPath = path.join(__dirname, '../config/apiKeys.json');
      const keysData = fs.readFileSync(keysPath, 'utf8');
      const { perplexityKeys } = JSON.parse(keysData);
      
      if (!perplexityKeys || perplexityKeys.length === 0) {
        throw new Error('No Perplexity API keys found in config file');
      }
      
      return perplexityKeys;
    } catch (error) {
      console.error('Error loading API keys:', error.message);
      throw error;
    }
  }

  getNextApiKey() {
    const key = this.apiKeys[this.currentKeyIndex];
    console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º Perplexity API –∫–ª—é—á: ${key.substring(0, 20)}...`);
    this.currentKeyIndex = (this.currentKeyIndex + 1) % this.apiKeys.length;
    return key;
  }

  parsePerplexityResponse(content) {
    // –†–∞–∑–¥–µ–ª—è–µ–º –±–ª–æ–∫ <think> –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const thinkMatch = content.match(/<think>([\s\S]*?)<\/think>\s*([\s\S]*)/);
    
    if (thinkMatch) {
      return {
        thinking: thinkMatch[1].trim(),
        content: thinkMatch[2].trim()
      };
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –±–ª–æ–∫–∞ <think>, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
    return {
      thinking: '',
      content: content.trim()
    };
  }

  async makeRequest(prompt, maxRetries = 3) {
    let lastError;
    
    for (let attempt = 0; attempt < maxRetries; attempt++) {
      try {
        const apiKey = this.getNextApiKey();
        
        const response = await axios.post(
          'https://api.perplexity.ai/chat/completions',
          {
            model: 'sonar',
            messages: [
              {
                role: 'system',
                content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–∑–¥–∞–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è YouTube –≤–∏–¥–µ–æ.'
              },
              {
                role: 'user',
                content: prompt
              }
            ],
            max_tokens: 4000,
            temperature: 0.7
          },
          {
            headers: {
              'Authorization': `Bearer ${apiKey}`,
              'Content-Type': 'application/json'
            },
            timeout: 60000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥
          }
        );

        const fullContent = response.data.choices[0].message.content;
        return this.parsePerplexityResponse(fullContent);
      } catch (error) {
        lastError = error;
        console.warn(`Attempt ${attempt + 1} failed:`, error.message);
        
        if (attempt < maxRetries - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)));
        }
      }
    }
    
    throw new Error(`All API requests failed. Last error: ${lastError.message}`);
  }

  async generateVideoContent(topic, language = 'ru') {
    try {
      console.log(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ–º—ã: "${topic}" –Ω–∞ —è–∑—ã–∫–µ: ${language}`);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
      const scriptPrompt = `–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è YouTube –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É "${topic}" –Ω–∞ —è–∑—ã–∫–µ ${language}. 
      –°—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:
      1. –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã)
      2. –û—Å–Ω–æ–≤–Ω—É—é —á–∞—Å—Ç—å (3-5 –∫–ª—é—á–µ–≤—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º)
      3. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ (—Ä–µ–∑—é–º–µ, –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é)
      
      –°—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤ –¥–ª—è –æ–∑–≤—É—á–∫–∏, —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏.`;

      const scriptResponse = await this.makeRequest(scriptPrompt);
      const script = scriptResponse.content;

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
      const titlePrompt = `–°–æ–∑–¥–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è YouTube –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É "${topic}" –Ω–∞ —è–∑—ã–∫–µ ${language}. 
      –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:
      - –¶–µ–ø–ª—è—é—â–∏–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º
      - –°–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      - –î–ª–∏–Ω–æ–π 50-60 —Å–∏–º–≤–æ–ª–æ–≤
      - –í —Å—Ç–∏–ª–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö YouTube –∫–∞–Ω–∞–ª–æ–≤
      
      –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

      const titleResponse = await this.makeRequest(titlePrompt);
      const title = titleResponse.content;

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
      const descriptionPrompt = `–°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è YouTube –≤–∏–¥–µ–æ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${title}" –Ω–∞ —Ç–µ–º—É "${topic}" –Ω–∞ —è–∑—ã–∫–µ ${language}.
      –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å:
      1. –ö—Ä–∞—Ç–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –≤ —Ç–µ–º—É (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
      2. –ß—Ç–æ –∑—Ä–∏—Ç–µ–ª—å —É–∑–Ω–∞–µ—Ç –∏–∑ –≤–∏–¥–µ–æ (—Å–ø–∏—Å–æ–∫ –∏–∑ 3-5 –ø—É–Ω–∫—Ç–æ–≤)
      3. –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é (–ø–æ–¥–ø–∏—Å–∫–∞, –ª–∞–π–∫, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
      4. –•–µ—à—Ç–µ–≥–∏ (5-7 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö)
      
      –û–±—â–∞—è –¥–ª–∏–Ω–∞: 200-300 —Å–ª–æ–≤.`;

      const descriptionResponse = await this.makeRequest(descriptionPrompt);
      const description = descriptionResponse.content;

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      const keywordsPrompt = `–°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è YouTube –≤–∏–¥–µ–æ "${title}" –Ω–∞ —Ç–µ–º—É "${topic}" –Ω–∞ —è–∑—ã–∫–µ ${language}.
      –í–µ—Ä–Ω–∏ 10-15 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤ –ø–æ–∏—Å–∫–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö YouTube.
      –í–∫–ª—é—á–∏ –∫–∞–∫ –æ–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã, —Ç–∞–∫ –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–ª—è —Ç–µ–º—ã.`;

      const keywordsResponse = await this.makeRequest(keywordsPrompt);
      const keywords = keywordsResponse.content;

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
      const voiceoverPrompt = `–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ YouTube –≤–∏–¥–µ–æ "${title}" –Ω–∞ —Ç–µ–º—É "${topic}" –Ω–∞ —è–∑—ã–∫–µ ${language}.
      –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
      - –ì–æ—Ç–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      - –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–º
      - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 45-60 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ (–∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ)
      - –ë–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—å
      - –°–∂–∞—Ç—ã–º –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É
      
      –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
      1. –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã (5-10 —Å–µ–∫)
      2. 2-3 –≥–ª–∞–≤–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –∏–ª–∏ —Ñ–∞–∫—Ç–∞ (30-40 —Å–µ–∫)
      3. –ö—Ä–∞—Ç–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é (5-10 —Å–µ–∫)
      
      –ü–∏—à–∏ —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å —Å –¥—Ä—É–≥–æ–º. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º.`;

      const voiceoverResponse = await this.makeRequest(voiceoverPrompt);
      const voiceoverText = voiceoverResponse.content;

      return {
        topic,
        language,
        title: title.trim(),
        description: description.trim(),
        script: script.trim(),
        keywords: keywords.trim(),
        voiceoverText: voiceoverText.trim(),
        thinking: {
          script: scriptResponse.thinking,
          title: titleResponse.thinking,
          description: descriptionResponse.thinking,
          keywords: keywordsResponse.thinking,
          voiceover: voiceoverResponse.thinking
        },
        generatedAt: new Date().toISOString(),
        status: 'success'
      };

    } catch (error) {
      console.error('Error generating video content:', error);
      return {
        topic,
        language,
        error: error.message,
        generatedAt: new Date().toISOString(),
        status: 'error'
      };
    }
  }

  async generateDetailedScript(topic, language = 'ru') {
    try {
      console.log(`üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ: "${topic}" –Ω–∞ —è–∑—ã–∫–µ: ${language}`);
      
      const prompt = `–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤–∏–¥–µ–æ (45-60 —Å–µ–∫—É–Ω–¥) –Ω–∞ —Ç–µ–º—É "${topic}" –Ω–∞ —è–∑—ã–∫–µ ${language}.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º (1080x1920) –¥–ª—è TikTok/YouTube Shorts
- –†–∞–∑–±–µ–π –Ω–∞ 3-5 —Å—Ü–µ–Ω –ø–æ 10-15 —Å–µ–∫—É–Ω–¥ –∫–∞–∂–¥–∞—è
- –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã —É–∫–∞–∂–∏: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏, –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∞, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ
- –ò—Å–ø–æ–ª—å–∑—É–π –¥–∏–Ω–∞–º–∏—á–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞–º–∏

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ",
  "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
  "totalDuration": 60,
  "scenes": [
    {
      "sceneNumber": 1,
      "duration": 15,
      "title": "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã",
      "voiceoverText": "–¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏",
      "visualDescription": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ",
      "searchKeywords": ["–∫–ª—é—á–µ–≤–æ–µ", "—Å–ª–æ–≤–æ", "–¥–ª—è", "–ø–æ–∏—Å–∫–∞"],
      "transitionType": "cut"
    }
  ]
}`;

      const response = await this.makeRequest(prompt);
      
      if (!response || !response.content) {
        return {
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Perplexity API'
        };
      }

      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
      try {
        const jsonMatch = response.content.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const scriptData = JSON.parse(jsonMatch[0]);
          
          return {
            success: true,
            script: scriptData,
            rawResponse: response.content
          };
        } else {
          throw new Error('JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
        }
      } catch (parseError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Å—Ü–µ–Ω–∞—Ä–∏—è:', parseError);
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON —Å—Ü–µ–Ω–∞—Ä–∏–π',
          rawResponse: response.content
        };
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  async selectBestVideo(scene, videoOptions) {
    try {
      console.log(`üéØ –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã: ${scene.title}`);
      console.log(`üìä –î–æ—Å—Ç—É–ø–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ${videoOptions.length}`);
      
      const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –≤—ã–±–µ—Ä–∏ –ª—É—á—à–µ–µ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤–∏–¥–µ–æ.

–°—Ü–µ–Ω–∞:
- –ù–∞–∑–≤–∞–Ω–∏–µ: ${scene.title}
- –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∞: ${scene.visualDescription}
- –¢–µ–∫—Å—Ç –æ–∑–≤—É—á–∫–∏: ${scene.voiceoverText}
- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${scene.searchKeywords.join(', ')}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥–µ–æ:
${videoOptions.map((video, index) => `
${index + 1}. ID: ${video.id}
   - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${video.duration} —Å–µ–∫
   - –†–∞–∑–º–µ—Ä: ${video.width}x${video.height}
   - –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ–∏—Å–∫–∞: ${video.searchKeyword || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
`).join('')}

–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ª—É—á—à–µ–≥–æ –≤–∏–¥–µ–æ (1-${videoOptions.length}) –∏ –∫—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ: [–Ω–æ–º–µ—Ä]
–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ]`;

      const response = await this.makeRequest(prompt);
      
      if (!response || !response.content) {
        return {
          success: false,
          error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Perplexity API',
          selectedVideo: videoOptions[0] // Fallback –Ω–∞ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ
        };
      }

      // –ü–∞—Ä—Å–∏–º –≤—ã–±–æ—Ä
      const selectedMatch = response.content.match(/–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ:\s*(\d+)/);
      const selectedIndex = selectedMatch ? parseInt(selectedMatch[1]) - 1 : 0;
      
      const selectedVideo = videoOptions[selectedIndex] || videoOptions[0];
      
      return {
        success: true,
        selectedVideo: selectedVideo,
        selectedIndex: selectedIndex,
        reasoning: response.content,
        allOptions: videoOptions
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–µ–æ:', error);
      return {
        success: false,
        error: error.message,
        selectedVideo: videoOptions[0] // Fallback –Ω–∞ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ
  async getSearchSynonyms(keywords, language = 'ru') {
    try {
      const prompt = `–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ –≤ Pexels –º–Ω–µ –Ω—É–∂–Ω—ã —Å–∏–Ω–æ–Ω–∏–º—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å–ª–µ–¥—É—é—â–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: ${keywords.join(', ')}.

–Ø–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${language}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
1. –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
2. –°–∏–Ω–æ–Ω–∏–º—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
3. –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
4. –ë–æ–ª–µ–µ –æ–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π):
word1, word2, word3, word4, word5`;

      const response = await this.makeRequest(prompt);
      
      if (response.success) {
        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞
        const content = response.content.toLowerCase();
        const words = content
          .split(/[,\n\r]+/)
          .map(word => word.trim())
          .filter(word => word.length > 2 && word.length < 20)
          .slice(0, 8); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 8 —Å–ª–æ–≤
        
        console.log(`üîç Perplexity –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–∏–Ω–æ–Ω–∏–º—ã: ${words.join(', ')}`);
        return words;
      }
      
      return [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤:', error.message);
      return [];
    }
  }

  async checkAvailability() {
    try {
      // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
      const response = await this.makeRequest('–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API');
      return response.success;
    } catch (error) {
      console.error('‚ùå Perplexity API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      return false;
    }
  }
}

module.exports = PerplexityService;
