const { S3Client, PutObjectCommand, DeleteObjectCommand, ListObjectsV2Command, GetObjectCommand } = require('@aws-sdk/client-s3');
const { getSignedUrl } = require('@aws-sdk/s3-request-presigner');
const fs = require('fs-extra');
const path = require('path');

class BackblazeService {
  constructor() {
    this.loadConfig();
  }

  loadConfig() {
    try {
      const configPath = path.join(__dirname, '../config/apiKeys.json');
      const config = fs.readJsonSync(configPath);
      
      // –°–æ–∑–¥–∞–µ–º S3 –∫–ª–∏–µ–Ω—Ç –¥–ª—è Backblaze B2
      this.s3 = new S3Client({
        endpoint: config.backblaze.endpoint, // –Ω–∞–ø—Ä–∏–º–µ—Ä: https://s3.us-west-004.backblazeb2.com
        region: config.backblaze.region,      // –Ω–∞–ø—Ä–∏–º–µ—Ä: us-west-004
        credentials: {
          accessKeyId: config.backblaze.keyId,
          secretAccessKey: config.backblaze.applicationKey
        }
      });
      
      this.bucketName = config.backblaze.bucketName;
      this.publicUrl = config.backblaze.publicUrl; // –Ω–∞–ø—Ä–∏–º–µ—Ä: https://f004.backblazeb2.com/file/your-bucket
      
      console.log('‚úÖ Backblaze B2 —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Backblaze:', error);
    }
  }

  async uploadFile(filePath) {
    try {
      if (!this.s3) {
        throw new Error('Backblaze B2 –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Backblaze B2: ${filePath}`);
      
      const fileName = `audio/${Date.now()}-${path.basename(filePath)}`;
      const fileBuffer = await fs.readFile(filePath);
      
      await this.s3.send(new PutObjectCommand({
        Bucket: this.bucketName,
        Key: fileName,
        Body: fileBuffer,
        ContentType: 'audio/mpeg'
      }));
      
      // –°–æ–∑–¥–∞–µ–º presigned URL –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      const presignedUrl = await this.getPresignedUrl(fileName);
      console.log(`‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${presignedUrl}`);
      
      return presignedUrl;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Backblaze B2:', error);
      throw error;
    }
  }

  async deleteFile(fileUrl) {
    try {
      if (!this.s3) {
        throw new Error('Backblaze B2 –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á —Ñ–∞–π–ª–∞ –∏–∑ URL
      const fileName = fileUrl.split(`${this.publicUrl}/`)[1];
      
      await this.s3.send(new DeleteObjectCommand({
        Bucket: this.bucketName,
        Key: fileName
      }));
      
      console.log(`‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ Backblaze B2: ${fileName}`);
      return { success: true };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
      return { success: false, error: error.message };
    }
  }

  async getPresignedUrl(fileName, expiresIn = 3600) {
    try {
      if (!this.s3) {
        throw new Error('Backblaze B2 –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      const command = new GetObjectCommand({
        Bucket: this.bucketName,
        Key: fileName
      });

      const presignedUrl = await getSignedUrl(this.s3, command, { expiresIn });
      console.log(`üîó Presigned URL —Å–æ–∑–¥–∞–Ω: ${presignedUrl}`);
      
      return presignedUrl;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è presigned URL:', error);
      throw error;
    }
  }

  async checkAvailability() {
    try {
      if (!this.s3) {
        return false;
      }
      
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
      await this.s3.send(new ListObjectsV2Command({
        Bucket: this.bucketName,
        MaxKeys: 1
      }));
      
      return true;
    } catch (error) {
      console.error('‚ùå Backblaze B2 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      return false;
    }
  }
}

module.exports = BackblazeService;
