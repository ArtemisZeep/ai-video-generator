const fs = require('fs-extra');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');

const execAsync = promisify(exec);

class FallbackTtsService {
  constructor() {
    this.outputDir = path.join(__dirname, '../data/audio');
    this.ensureOutputDir();
  }

  async ensureOutputDir() {
    await fs.ensureDir(this.outputDir);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ TTS
  async checkAvailability() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å say (macOS) –∏–ª–∏ espeak (Linux)
      const { stdout } = await execAsync('which say || which espeak || which festival');
      return stdout.trim().length > 0;
    } catch (error) {
      console.log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–π TTS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      return false;
    }
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ TTS
  async generateSpeech(text, outputPath, language = 'ru') {
    try {
      console.log(`üîä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π TTS: ${text.substring(0, 50)}...`);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É TTS –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Å—Ç–µ–º—ã
      let ttsCommand;
      if (process.platform === 'darwin') {
        // macOS - –∏—Å–ø–æ–ª—å–∑—É–µ–º say
        ttsCommand = `say -v "Yuri" -r 200 -o "${outputPath}" "${text}"`;
      } else if (process.platform === 'linux') {
        // Linux - –∏—Å–ø–æ–ª—å–∑—É–µ–º espeak
        const voice = language === 'ru' ? 'ru' : 'en';
        ttsCommand = `espeak -v ${voice} -s 150 -w "${outputPath}" "${text}"`;
      } else {
        // Windows - –∏—Å–ø–æ–ª—å–∑—É–µ–º PowerShell
        ttsCommand = `powershell -Command "Add-Type -AssemblyName System.Speech; (New-Object System.Speech.Synthesis.SpeechSynthesizer).SetOutputToWaveFile('${outputPath}'); (New-Object System.Speech.Synthesis.SpeechSynthesizer).Speak('${text.replace(/'/g, "''")}')"`;
      }

      console.log(`üé§ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: ${ttsCommand}`);
      await execAsync(ttsCommand);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
      if (await fs.pathExists(outputPath)) {
        const stats = await fs.stat(outputPath);
        console.log(`‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ: ${outputPath} (${stats.size} –±–∞–π—Ç)`);
        return {
          success: true,
          filePath: outputPath,
          fileSize: stats.size
        };
      } else {
        throw new Error('–§–∞–π–ª –∞—É–¥–∏–æ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ TTS:', error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∑–≤—É—á–∫—É –¥–ª—è –≤–∏–¥–µ–æ
  async generateAndSaveVoiceover(text, videoId, language = 'ru') {
    try {
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const filename = `voiceover_${videoId}_${timestamp}.wav`;
      const filePath = path.join(this.outputDir, filename);

      console.log(`üéµ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–∑–≤—É—á–∫—É —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π TTS`);
      console.log(`üìù –¢–µ–∫—Å—Ç: ${text.substring(0, 100)}...`);
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤: ${filePath}`);

      const result = await this.generateSpeech(text, filePath, language);
      
      if (result.success) {
        return {
          success: true,
          filename: filename,
          filePath: filePath,
          fileSize: result.fileSize,
          generatedAt: new Date().toISOString()
        };
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–∑–≤—É—á–∫–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π TTS:', error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }
}

module.exports = FallbackTtsService;
