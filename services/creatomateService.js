const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');

class CreatomateService {
  constructor() {
    this.apiKeys = this.loadApiKeys();
    this.baseUrl = 'https://api.creatomate.com/v2';
  }

  loadApiKeys() {
    try {
      const configPath = path.join(__dirname, '../config/apiKeys.json');
      const config = fs.readJsonSync(configPath);
      return {
        creatomate: config.creatomate
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Creatomate:', error);
      return { creatomate: null };
    }
  }

  getApiKey() {
    if (!this.apiKeys.creatomate || this.apiKeys.creatomate === 'your-creatomate-key') {
      throw new Error('Creatomate API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    return this.apiKeys.creatomate;
  }

  async createRender(templateId, modifications) {
    try {
      console.log(`üé¨ –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä –≤ Creatomate —Å —à–∞–±–ª–æ–Ω–æ–º: ${templateId}`);
      console.log(`üìù –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:`, JSON.stringify(modifications, null, 2));
      
      const response = await axios.post(`${this.baseUrl}/renders`, {
        template_id: templateId,
        modifications: modifications
      }, {
        headers: {
          'Authorization': `Bearer ${this.getApiKey()}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000
      });

      console.log(`‚úÖ –†–µ–Ω–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: ${response.data[0].id}`);
      
      return {
        success: true,
        renderId: response.data[0].id,
        status: response.data[0].status,
        url: response.data[0].url,
        snapshotUrl: response.data[0].snapshot_url,
        createdAt: response.data[0].created_at
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ –≤ Creatomate:', error.response?.data || error.message);
      return {
        success: false,
        error: error.response?.data?.error || error.message
      };
    }
  }

  async getRenderStatus(renderId) {
    try {
      const response = await axios.get(`${this.baseUrl}/renders/${renderId}`, {
        headers: {
          'Authorization': `Bearer ${this.getApiKey()}`
        },
        timeout: 30000
      });

      return {
        success: true,
        renderId: response.data.id,
        status: response.data.status,
        url: response.data.url,
        snapshotUrl: response.data.snapshot_url,
        createdAt: response.data.created_at,
        updatedAt: response.data.updated_at
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–Ω–¥–µ—Ä–∞:', error.response?.data || error.message);
      return {
        success: false,
        error: error.response?.data?.error || error.message
      };
    }
  }

  async waitForRender(renderId, maxWaitTime = 300000) { // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
    console.log(`‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∞: ${renderId}`);
    
    const startTime = Date.now();
    const pollInterval = 5000; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    
    while (Date.now() - startTime < maxWaitTime) {
      const statusResult = await this.getRenderStatus(renderId);
      
      if (!statusResult.success) {
        return statusResult;
      }
      
      console.log(`üìä –°—Ç–∞—Ç—É—Å —Ä–µ–Ω–¥–µ—Ä–∞: ${statusResult.status}`);
      
      if (statusResult.status === 'succeeded') {
        console.log(`‚úÖ –†–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
        return statusResult;
      }
      
      if (statusResult.status === 'failed') {
        console.log(`‚ùå –†–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π`);
        return {
          success: false,
          error: 'Render failed',
          status: 'failed'
        };
      }
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, pollInterval));
    }
    
    console.log(`‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∞`);
    return {
      success: false,
      error: 'Render timeout',
      status: 'timeout'
    };
  }

  // –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ü–µ–Ω –∏ –∞—É–¥–∏–æ
  createModifications(scenes, audioUrl, templateId) {
    const modifications = {};
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
    if (audioUrl) {
      modifications['Music.source'] = audioUrl;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ –∏ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã
    scenes.forEach((sceneData, index) => {
      const sceneNumber = index + 1;
      
      // –§–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
      if (sceneData.selectedVideo) {
        modifications[`Background-${sceneNumber}.source`] = sceneData.selectedVideo.videoUrl;
      }
      
      // –¢–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
      if (sceneData.scene.voiceoverText) {
        modifications[`Text-${sceneNumber}.text`] = sceneData.scene.voiceoverText;
      }
      
      // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ü–µ–Ω—ã (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —à–∞–±–ª–æ–Ω–æ–º)
      if (sceneData.scene.duration) {
        modifications[`Scene-${sceneNumber}.duration`] = sceneData.scene.duration;
      }
    });
    
    return modifications;
  }

  // –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
  async createVideo(scenes, audioUrl, templateId = 'f193560a-e643-4cf2-93a6-0b0f2a5e08f7') {
    try {
      console.log(`üé¨ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ Creatomate`);
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω: ${scenes.length}`);
      console.log(`üéµ –ê—É–¥–∏–æ URL: ${audioUrl}`);
      
      // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const modifications = this.createModifications(scenes, audioUrl, templateId);
      
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä
      const renderResult = await this.createRender(templateId, modifications);
      
      if (!renderResult.success) {
        return renderResult;
      }
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∞
      const finalResult = await this.waitForRender(renderResult.renderId);
      
      if (finalResult.success) {
        console.log(`üéâ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ: ${finalResult.url}`);
      }
      
      return finalResult;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –≤ Creatomate:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
  async checkAvailability() {
    try {
      // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
      const response = await axios.get(`${this.baseUrl}/templates`, {
        headers: {
          'Authorization': `Bearer ${this.getApiKey()}`
        },
        timeout: 10000
      });
      
      return response.status === 200;
    } catch (error) {
      console.error('‚ùå Creatomate API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      return false;
    }
  }
}

module.exports = CreatomateService;
