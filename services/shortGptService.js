const { spawn } = require('child_process');
const fs = require('fs-extra');
const path = require('path');

class ShortGptService {
  constructor() {
    this.pythonPath = path.join(__dirname, '../python');
    this.configPath = path.join(this.pythonPath, 'config.json');
    this.videoScriptPath = path.join(this.pythonPath, 'video_creator.py');
    this.venvPythonPath = path.join(this.pythonPath, 'venv', 'bin', 'python');
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    this.ensureDirectories();
  }

  ensureDirectories() {
    const videoDir = path.join(__dirname, '../data/videos');
    fs.ensureDirSync(videoDir);
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ShortGPT
   */
  async updateConfig(config) {
    try {
      const configData = {
        openai_key: config.openai_key || '',
        elevenlabs_key: config.elevenlabs_key || '',
        pexels_key: config.pexels_key || '',
        voice_name: config.voice_name || 'Charlie',
        language: config.language || 'ru',
        background_music_url: config.background_music_url || '',
        watermark: config.watermark || null,
        video_settings: {
          isVerticalFormat: true,
          resolution: '1080x1920',
          fps: 30,
          bitrate: '2M'
        },
        audio_settings: {
          sample_rate: 44100,
          bitrate: '128k'
        }
      };

      await fs.writeJson(this.configPath, configData, { spaces: 2 });
      console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ShortGPT –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É—è ShortGPT
   */
  async createVideo(scriptText, videoId, options = {}) {
    return new Promise((resolve, reject) => {
      console.log(`üé¨ –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —Å ID: ${videoId}`);
      console.log(`üìù –î–ª–∏–Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞: ${scriptText.length} —Å–∏–º–≤–æ–ª–æ–≤`);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è Python —Å–∫—Ä–∏–ø—Ç–∞
      const args = [
        this.videoScriptPath,
        this.configPath,
        scriptText,
        videoId
      ];

      console.log(`üêç –ó–∞–ø—É—Å–∫–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç: python ${args.join(' ')}`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ Python (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π)
      const pythonExecutable = fs.existsSync(this.venvPythonPath) ? this.venvPythonPath : 'python3';
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç
      const pythonProcess = spawn(pythonExecutable, args, {
        cwd: this.pythonPath,
        stdio: ['pipe', 'pipe', 'pipe']
      });

      let stdout = '';
      let stderr = '';

      // –°–æ–±–∏—Ä–∞–µ–º –≤—ã–≤–æ–¥
      pythonProcess.stdout.on('data', (data) => {
        const output = data.toString();
        stdout += output;
        console.log(`üìã Python: ${output.trim()}`);
      });

      pythonProcess.stderr.on('data', (data) => {
        const error = data.toString();
        stderr += error;
        console.error(`‚ùå Python Error: ${error.trim()}`);
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
      pythonProcess.on('close', (code) => {
        console.log(`üêç Python –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);

        if (code === 0) {
          try {
            // –ü–∞—Ä—Å–∏–º JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ stdout
            const lines = stdout.split('\n');
            let jsonResult = null;

            // –ò—â–µ–º JSON –≤ –≤—ã–≤–æ–¥–µ
            for (const line of lines) {
              if (line.trim().startsWith('{') || line.trim().startsWith('[')) {
                try {
                  jsonResult = JSON.parse(line.trim());
                  break;
                } catch (e) {
                  // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
                }
              }
            }

            if (jsonResult) {
              if (jsonResult.status === 'success') {
                console.log('‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!');
                resolve({
                  success: true,
                  videoId: videoId,
                  videoPath: jsonResult.video_path,
                  fileSize: jsonResult.file_size,
                  message: jsonResult.message
                });
              } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ:', jsonResult.error);
                reject(new Error(jsonResult.error));
              }
            } else {
              console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç Python —Å–∫—Ä–∏–ø—Ç–∞');
              reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç Python —Å–∫—Ä–∏–ø—Ç–∞'));
            }
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error.message);
            reject(error);
          }
        } else {
          const errorMsg = `Python —Å–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: ${code})\nSTDERR: ${stderr}`;
          console.error('‚ùå', errorMsg);
          reject(new Error(errorMsg));
        }
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
      pythonProcess.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Python –ø—Ä–æ—Ü–µ—Å—Å–∞:', error.message);
        reject(error);
      });

      // –¢–∞–π–º–∞—É—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (10 –º–∏–Ω—É—Ç)
      const timeout = setTimeout(() => {
        pythonProcess.kill();
        reject(new Error('–¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ (10 –º–∏–Ω—É—Ç)'));
      }, 10 * 60 * 1000);

      pythonProcess.on('close', () => {
        clearTimeout(timeout);
      });
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ShortGPT
   */
  async checkShortGptAvailability() {
    return new Promise((resolve) => {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ShortGPT...');

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ Python (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π)
      const pythonExecutable = fs.existsSync(this.venvPythonPath) ? this.venvPythonPath : 'python3';
      
      const pythonProcess = spawn(pythonExecutable, ['-c', 'import moviepy; import PIL; print("Video creation libraries –¥–æ—Å—Ç—É–ø–Ω—ã")'], {
        cwd: this.pythonPath,
        stdio: ['pipe', 'pipe', 'pipe']
      });

      let stdout = '';
      let stderr = '';

      pythonProcess.stdout.on('data', (data) => {
        stdout += data.toString();
      });

      pythonProcess.stderr.on('data', (data) => {
        stderr += data.toString();
      });

      pythonProcess.on('close', (code) => {
        if (code === 0 && stdout.includes('Video creation libraries –¥–æ—Å—Ç—É–ø–Ω—ã')) {
          console.log('‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω—ã');
          resolve(true);
        } else {
          console.log('‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', stderr);
          resolve(false);
        }
      });

      pythonProcess.on('error', () => {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ShortGPT');
        resolve(false);
      });
    });
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python
   */
  async installDependencies() {
    return new Promise((resolve, reject) => {
      console.log('üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ pip (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π)
      const pipExecutable = fs.existsSync(this.venvPythonPath) ? 
        path.join(this.pythonPath, 'venv', 'bin', 'pip') : 'pip3';
      
      const pipProcess = spawn(pipExecutable, ['install', '-r', 'requirements.txt'], {
        cwd: this.pythonPath,
        stdio: ['pipe', 'pipe', 'pipe']
      });

      let stdout = '';
      let stderr = '';

      pipProcess.stdout.on('data', (data) => {
        stdout += data.toString();
        console.log(`üì¶ pip: ${data.toString().trim()}`);
      });

      pipProcess.stderr.on('data', (data) => {
        stderr += data.toString();
        console.error(`‚ùå pip error: ${data.toString().trim()}`);
      });

      pipProcess.on('close', (code) => {
        if (code === 0) {
          console.log('‚úÖ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
          resolve(true);
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', stderr);
          reject(new Error(stderr));
        }
      });

      pipProcess.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ pip:', error.message);
        reject(error);
      });
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
   */
  async getVideoInfo(videoId) {
    try {
      const videoPath = path.join(__dirname, '../data/videos', videoId, `${videoId}.mp4`);
      
      if (await fs.pathExists(videoPath)) {
        const stats = await fs.stat(videoPath);
        return {
          exists: true,
          path: videoPath,
          size: stats.size,
          created: stats.birthtime,
          modified: stats.mtime
        };
      } else {
        return { exists: false };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ:', error.message);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –≤–∏–¥–µ–æ
   */
  async deleteVideo(videoId) {
    try {
      const videoDir = path.join(__dirname, '../data/videos', videoId);
      
      if (await fs.pathExists(videoDir)) {
        await fs.remove(videoDir);
        console.log(`üóëÔ∏è –í–∏–¥–µ–æ ${videoId} —É–¥–∞–ª–µ–Ω–æ`);
        return true;
      } else {
        console.log(`‚ö†Ô∏è –í–∏–¥–µ–æ ${videoId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ:', error.message);
      throw error;
    }
  }
}

module.exports = ShortGptService;
