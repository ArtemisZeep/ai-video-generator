const PerplexityService = require('./perplexityService');
const ElevenLabsService = require('./elevenLabsService');
const PexelsService = require('./pexelsService');
const ShotstackService = require('./shotstackService');
const DataService = require('./dataService');
const fs = require('fs-extra');
const path = require('path');

class VideoPipelineService {
  constructor() {
    this.perplexityService = new PerplexityService();
    this.elevenLabsService = new ElevenLabsService();
    this.pexelsService = new PexelsService();
    this.shotstackService = new ShotstackService();
    this.dataService = new DataService();
  }

  // –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞–π–ø–ª–∞–π–Ω–∞
  async generateFullVideo(topic, language = 'ru', options = {}) {
    const videoId = this.generateVideoId();
    const startTime = Date.now();
    
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ`);
    console.log(`üìù –¢–µ–º–∞: ${topic}`);
    console.log(`üåç –Ø–∑—ã–∫: ${language}`);
    console.log(`üÜî ID –≤–∏–¥–µ–æ: ${videoId}`);

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let videoData = {
      id: videoId,
      topic: topic,
      language: language,
      status: 'started',
      pipeline: {
        totalDuration: 0,
        stages: {
          scriptGeneration: 'pending',
          videoSearch: 'pending',
          videoSelection: 'pending',
          audioGeneration: 'pending',
          videoCreation: 'pending'
        }
      },
      createdAt: new Date().toISOString()
    };

    try {
      // –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
      console.log(`\nüìã –≠–¢–ê–ü 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è`);
      const scriptResult = await this.perplexityService.generateDetailedScript(topic, language);
      
      if (!scriptResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scriptResult.error}`);
      }

      const script = scriptResult.script;
      console.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω: ${script.title}`);
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω: ${script.scenes.length}`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 1
      videoData.script = script;
      videoData.title = script.title;
      videoData.description = script.description;
      videoData.pipeline.stages.scriptGeneration = 'completed';
      await this.dataService.saveVideo(videoData);
      console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 1 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);

      // –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã
      console.log(`\nüé¨ –≠–¢–ê–ü 2: –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Pexels`);
      const videoSearchResult = await this.pexelsService.searchVideosForScenes(script.scenes, language);
      
      if (!videoSearchResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ: ${videoSearchResult.error}`);
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –≤–∏–¥–µ–æ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 2
      videoData.videoSearchResults = videoSearchResult.results;
      videoData.pipeline.stages.videoSearch = 'completed';
      await this.dataService.saveVideo(videoData);
      console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 2 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);

      // –≠—Ç–∞–ø 3: –£–º–Ω—ã–π –æ—Ç–±–æ—Ä –ª—É—á—à–∏—Ö –≤–∏–¥–µ–æ
      console.log(`\nüéØ –≠–¢–ê–ü 3: –£–º–Ω—ã–π –æ—Ç–±–æ—Ä –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Perplexity`);
      const selectedVideos = [];
      
      for (let i = 0; i < videoSearchResult.results.length; i++) {
        const sceneData = videoSearchResult.results[i];
        const scene = sceneData.scene;
        const videoOptions = sceneData.videos;
        
        if (videoOptions.length === 0) {
          console.log(`‚ö†Ô∏è –ù–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã ${i + 1}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ–∏—Å–∫–∞ –∫ –∫–∞–∂–¥–æ–º—É –≤–∏–¥–µ–æ
        const videosWithKeywords = videoOptions.map(video => ({
          ...video,
          searchKeyword: sceneData.searchKeywords[0] // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        }));

        const selectionResult = await this.perplexityService.selectBestVideo(scene, videosWithKeywords);
        
        if (selectionResult.success) {
          selectedVideos.push({
            scene: scene,
            selectedVideo: selectionResult.selectedVideo,
            reasoning: selectionResult.reasoning,
            allOptions: selectionResult.allOptions
          });
          console.log(`‚úÖ –í—ã–±—Ä–∞–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã ${i + 1}: ${selectionResult.selectedVideo.id}`);
        } else {
          // Fallback –Ω–∞ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ
          selectedVideos.push({
            scene: scene,
            selectedVideo: videosWithKeywords[0],
            reasoning: 'Fallback –Ω–∞ –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤–∏–¥–µ–æ',
            allOptions: videosWithKeywords
          });
          console.log(`‚ö†Ô∏è Fallback –Ω–∞ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã ${i + 1}`);
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 3
      videoData.selectedVideos = selectedVideos;
      videoData.pipeline.stages.videoSelection = 'completed';
      await this.dataService.saveVideo(videoData);
      console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);

      // –≠—Ç–∞–ø 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ
console.log(`\nüéµ –≠–¢–ê–ü 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs`);
const fullVoiceoverText = script.scenes.map(scene => scene.voiceoverText).join(' ');

let audioResult;
try {
  audioResult = await this.elevenLabsService.generateAndSaveVoiceover(
    fullVoiceoverText,
    videoId,
    language
  );
  console.log(`‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ: ${audioResult.filename}`);
} catch (error) {
  throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: ${error.message}`);
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 4
videoData.audio = {
  filename: audioResult.filename,
  filePath: audioResult.filePath,
  fileSize: audioResult.fileSize,
  generatedAt: audioResult.generatedAt
};
videoData.pipeline.stages.audioGeneration = 'completed';
await this.dataService.saveVideo(videoData);
console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 4 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);


      // –≠—Ç–∞–ø 5: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Shotstack
      console.log(`\nüé¨ –≠–¢–ê–ü 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Shotstack`);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Shotstack
      const scenesForShotstack = selectedVideos.map(sceneData => ({
        scene: sceneData.scene,
        selectedVideo: {
          ...sceneData.selectedVideo,
          videoUrl: this.pexelsService.getVideoFileUrl(sceneData.selectedVideo)
        }
      }));

      const shotstackResult = await this.shotstackService.createVideo(
        scenesForShotstack,
        audioResult.filePath, // –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
        options
      );

      if (!shotstackResult.success) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ Shotstack: ${shotstackResult.error}`);
        console.log(`üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –±–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
        videoData.status = 'partial_complete';
        videoData.video = {
          error: shotstackResult.error,
          status: 'shotstack_failed'
        };
        videoData.pipeline.stages.videoCreation = 'failed';
        videoData.pipeline.totalDuration = Date.now() - startTime;
        await this.dataService.saveVideo(videoData);
        
        return {
          success: true,
          videoId: videoId,
          videoData: videoData,
          videoUrl: null,
          audioUrl: audioResult.filePath,
          duration: Date.now() - startTime,
          warning: '–í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Shotstack'
        };
      }

      console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: ${shotstackResult.url}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      videoData.video = {
        url: shotstackResult.url,
        status: shotstackResult.status,
        createdAt: shotstackResult.createdAt
      };
      videoData.status = 'completed';
      videoData.pipeline.stages.videoCreation = 'completed';
      videoData.pipeline.totalDuration = Date.now() - startTime;

      await this.dataService.saveVideo(videoData);
      console.log(`üíæ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);

      console.log(`\nüéâ –ü–ê–ô–ü–õ–ê–ô–ù –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!`);
      console.log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.round((Date.now() - startTime) / 1000)} —Å–µ–∫—É–Ω–¥`);
      console.log(`üé¨ –í–∏–¥–µ–æ: ${shotstackResult.url}`);

      return {
        success: true,
        videoId: videoId,
        videoData: videoData,
        videoUrl: shotstackResult.url,
        audioUrl: audioResult.filePath,
        duration: Date.now() - startTime
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: ${error.message}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –æ—à–∏–±–∫–æ–π
      videoData.status = 'failed';
      videoData.error = error.message;
      videoData.pipeline.totalDuration = Date.now() - startTime;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
      if (videoData.pipeline.stages.scriptGeneration === 'completed' && 
          videoData.pipeline.stages.videoSearch === 'pending') {
        videoData.pipeline.stages.videoSearch = 'failed';
      } else if (videoData.pipeline.stages.videoSearch === 'completed' && 
                 videoData.pipeline.stages.videoSelection === 'pending') {
        videoData.pipeline.stages.videoSelection = 'failed';
      } else if (videoData.pipeline.stages.videoSelection === 'completed' && 
                 videoData.pipeline.stages.audioGeneration === 'pending') {
        videoData.pipeline.stages.audioGeneration = 'failed';
      } else if (videoData.pipeline.stages.audioGeneration === 'completed' && 
                 videoData.pipeline.stages.videoCreation === 'pending') {
        videoData.pipeline.stages.videoCreation = 'failed';
      }

      await this.dataService.saveVideo(videoData);
      console.log(`üíæ –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);

      return {
        success: false,
        error: error.message,
        videoId: videoId,
        videoData: videoData
      };
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–ª—è –≤–∏–¥–µ–æ
  generateVideoId() {
    return 'video_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  async checkAllServices() {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...`);
    
    const checks = {
      perplexity: await this.perplexityService.checkAvailability(),
      elevenlabs: await this.elevenLabsService.checkAvailability(),
      pexels: await this.pexelsService.checkAvailability(),
      shotstack: await this.shotstackService.checkAvailability()
    };

    const allAvailable = Object.values(checks).every(status => status === true);
    
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:`);
    console.log(`  Perplexity: ${checks.perplexity ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ElevenLabs: ${checks.elevenlabs ? '‚úÖ' : '‚ùå'}`);
    console.log(`  Pexels: ${checks.pexels ? '‚úÖ' : '‚ùå'}`);
    console.log(`  Shotstack: ${checks.shotstack ? '‚úÖ' : '‚ùå'}`);
    
    return {
      allAvailable,
      services: checks
    };
  }

  // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–∞–π–ø–ª–∞–π–Ω —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –≤–∏–¥–µ–æ
  async continueVideoPipeline(videoId) {
    try {
      const video = await this.dataService.getVideoById(videoId);
      
      if (!video) {
        return {
          success: false,
          error: '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        };
      }

      console.log(`üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –≤–∏–¥–µ–æ: ${videoId}`);
      console.log(`üìù –¢–µ–º–∞: ${video.topic}`);
      console.log(`üåç –Ø–∑—ã–∫: ${video.language}`);

      const startTime = Date.now();
      let videoData = video;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å
      const stages = video.pipeline?.stages || {};
      
      try {
        // –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω)
        if (stages.videoSearch !== 'completed') {
          console.log(`\nüé¨ –≠–¢–ê–ü 2: –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Pexels`);
          const videoSearchResult = await this.pexelsService.searchVideosForScenes(video.script.scenes, video.language);
          
          if (!videoSearchResult.success) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ: ${videoSearchResult.error}`);
          }

          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –≤–∏–¥–µ–æ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω`);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 2
          videoData.videoSearchResults = videoSearchResult.results;
          videoData.pipeline.stages.videoSearch = 'completed';
          await this.dataService.saveVideo(videoData);
          console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 2 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
        }

        // –≠—Ç–∞–ø 3: –£–º–Ω—ã–π –æ—Ç–±–æ—Ä –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω)
        if (stages.videoSelection !== 'completed') {
          console.log(`\nüéØ –≠–¢–ê–ü 3: –£–º–Ω—ã–π –æ—Ç–±–æ—Ä –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Perplexity`);
          const selectedVideos = [];
          
          for (let i = 0; i < videoData.videoSearchResults.length; i++) {
            const sceneData = videoData.videoSearchResults[i];
            const scene = sceneData.scene;
            const videoOptions = sceneData.videos;
            
            if (videoOptions.length === 0) {
              console.log(`‚ö†Ô∏è –ù–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã ${i + 1}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
              continue;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ–∏—Å–∫–∞ –∫ –∫–∞–∂–¥–æ–º—É –≤–∏–¥–µ–æ
            const videosWithKeywords = videoOptions.map(video => ({
              ...video,
              searchKeyword: sceneData.searchKeywords[0]
            }));

            const selectionResult = await this.perplexityService.selectBestVideo(scene, videosWithKeywords);
            
            if (selectionResult.success) {
              selectedVideos.push({
                scene: scene,
                selectedVideo: selectionResult.selectedVideo,
                reasoning: selectionResult.reasoning,
                allOptions: selectionResult.allOptions
              });
              console.log(`‚úÖ –í—ã–±—Ä–∞–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã ${i + 1}: ${selectionResult.selectedVideo.id}`);
            } else {
              // Fallback –Ω–∞ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ
              selectedVideos.push({
                scene: scene,
                selectedVideo: videosWithKeywords[0],
                reasoning: 'Fallback –Ω–∞ –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤–∏–¥–µ–æ',
                allOptions: videosWithKeywords
              });
              console.log(`‚ö†Ô∏è Fallback –Ω–∞ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã ${i + 1}`);
            }
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 3
          videoData.selectedVideos = selectedVideos;
          videoData.pipeline.stages.videoSelection = 'completed';
          await this.dataService.saveVideo(videoData);
          console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
        }

        // –≠—Ç–∞–ø 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ (–µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω)
        if (stages.audioGeneration !== 'completed') {
          console.log(`\nüéµ –≠–¢–ê–ü 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs`);
          const fullVoiceoverText = video.script.scenes.map(scene => scene.voiceoverText).join(' ');

          let audioResult;
          try {
            audioResult = await this.elevenLabsService.generateAndSaveVoiceover(
              fullVoiceoverText,
              videoId,
              video.language
            );
            console.log(`‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ: ${audioResult.filename}`);
          } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: ${error.message}`);
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 4
          videoData.audio = {
            filename: audioResult.filename,
            filePath: audioResult.filePath,
            fileSize: audioResult.fileSize,
            generatedAt: audioResult.generatedAt
          };
          videoData.pipeline.stages.audioGeneration = 'completed';
          await this.dataService.saveVideo(videoData);
          console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∞–ø–∞ 4 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);
        }

        // –≠—Ç–∞–ø 5: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Shotstack (–µ—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω)
        if (stages.videoCreation !== 'completed') {
          console.log(`\nüé¨ –≠–¢–ê–ü 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Shotstack`);
          
          // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Shotstack
          const scenesForShotstack = videoData.selectedVideos.map(sceneData => ({
            scene: sceneData.scene,
            selectedVideo: {
              ...sceneData.selectedVideo,
              videoUrl: this.pexelsService.getVideoFileUrl(sceneData.selectedVideo)
            }
          }));

          const shotstackResult = await this.shotstackService.createVideo(
            scenesForShotstack,
            videoData.audio.filePath,
            {}
          );

          if (!shotstackResult.success) {
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ Shotstack: ${shotstackResult.error}`);
            console.log(`üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –±–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
            videoData.status = 'partial_complete';
            videoData.video = {
              error: shotstackResult.error,
              status: 'shotstack_failed'
            };
            videoData.pipeline.stages.videoCreation = 'failed';
            videoData.pipeline.totalDuration = Date.now() - startTime;
            await this.dataService.saveVideo(videoData);
            
            return {
              success: true,
              videoId: videoId,
              videoData: videoData,
              videoUrl: null,
              audioUrl: videoData.audio.filePath,
              duration: Date.now() - startTime,
              warning: '–í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Shotstack'
            };
          }

          console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: ${shotstackResult.url}`);

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          videoData.video = {
            url: shotstackResult.url,
            status: shotstackResult.status,
            createdAt: shotstackResult.createdAt
          };
          videoData.status = 'completed';
          videoData.pipeline.stages.videoCreation = 'completed';
          videoData.pipeline.totalDuration = Date.now() - startTime;

          await this.dataService.saveVideo(videoData);
          console.log(`üíæ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);

          console.log(`\nüéâ –ü–ê–ô–ü–õ–ê–ô–ù –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!`);
          console.log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.round((Date.now() - startTime) / 1000)} —Å–µ–∫—É–Ω–¥`);
          console.log(`üé¨ –í–∏–¥–µ–æ: ${shotstackResult.url}`);

          return {
            success: true,
            videoId: videoId,
            videoData: videoData,
            videoUrl: shotstackResult.url,
            audioUrl: videoData.audio.filePath,
            duration: Date.now() - startTime
          };
        }

        return {
          success: true,
          videoId: videoId,
          videoData: videoData,
          message: '–ü–∞–π–ø–ª–∞–π–Ω —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω'
        };

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: ${error.message}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –æ—à–∏–±–∫–æ–π
        videoData.status = 'failed';
        videoData.error = error.message;
        videoData.pipeline.totalDuration = Date.now() - startTime;
        
        await this.dataService.saveVideo(videoData);
        console.log(`üíæ –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);

        return {
          success: false,
          error: error.message,
          videoId: videoId,
          videoData: videoData
        };
      }

    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ –ø–æ ID
  async getVideoStatus(videoId) {
    try {
      const video = await this.dataService.getVideoById(videoId);
      
      if (!video) {
        return {
          success: false,
          error: '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        };
      }

      return {
        success: true,
        video: video,
        status: video.pipeline?.stages || {}
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }
}

module.exports = VideoPipelineService;
