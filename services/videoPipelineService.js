const PerplexityService = require('./perplexityService');
const ElevenLabsService = require('./elevenLabsService');
const PexelsService = require('./pexelsService');
const CreatomateService = require('./creatomateService');
const DataService = require('./dataService');
const fs = require('fs-extra');
const path = require('path');

class VideoPipelineService {
  constructor() {
    this.perplexityService = new PerplexityService();
    this.elevenLabsService = new ElevenLabsService();
    this.pexelsService = new PexelsService();
    this.creatomateService = new CreatomateService();
    this.dataService = new DataService();
  }

  // –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞–π–ø–ª–∞–π–Ω–∞
  async generateFullVideo(topic, language = 'ru', options = {}) {
    const videoId = this.generateVideoId();
    const startTime = Date.now();
    
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ`);
    console.log(`üìù –¢–µ–º–∞: ${topic}`);
    console.log(`üåç –Ø–∑—ã–∫: ${language}`);
    console.log(`üÜî ID –≤–∏–¥–µ–æ: ${videoId}`);

    try {
      // –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
      console.log(`\nüìã –≠–¢–ê–ü 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è`);
      const scriptResult = await this.perplexityService.generateDetailedScript(topic, language);
      
      if (!scriptResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scriptResult.error}`);
      }

      const script = scriptResult.script;
      console.log(`‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω: ${script.title}`);
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω: ${script.scenes.length}`);

      // –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã
      console.log(`\nüé¨ –≠–¢–ê–ü 2: –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Pexels`);
      const videoSearchResult = await this.pexelsService.searchVideosForScenes(script.scenes, language);
      
      if (!videoSearchResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ: ${videoSearchResult.error}`);
      }

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –≤–∏–¥–µ–æ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω`);

      // –≠—Ç–∞–ø 3: –£–º–Ω—ã–π –æ—Ç–±–æ—Ä –ª—É—á—à–∏—Ö –≤–∏–¥–µ–æ
      console.log(`\nüéØ –≠–¢–ê–ü 3: –£–º–Ω—ã–π –æ—Ç–±–æ—Ä –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Perplexity`);
      const selectedVideos = [];
      
      for (let i = 0; i < videoSearchResult.results.length; i++) {
        const sceneData = videoSearchResult.results[i];
        const scene = sceneData.scene;
        const videoOptions = sceneData.videos;
        
        if (videoOptions.length === 0) {
          console.log(`‚ö†Ô∏è –ù–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã ${i + 1}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ–∏—Å–∫–∞ –∫ –∫–∞–∂–¥–æ–º—É –≤–∏–¥–µ–æ
        const videosWithKeywords = videoOptions.map(video => ({
          ...video,
          searchKeyword: sceneData.searchKeywords[0] // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        }));

        const selectionResult = await this.perplexityService.selectBestVideo(scene, videosWithKeywords);
        
        if (selectionResult.success) {
          selectedVideos.push({
            scene: scene,
            selectedVideo: selectionResult.selectedVideo,
            reasoning: selectionResult.reasoning,
            allOptions: selectionResult.allOptions
          });
          console.log(`‚úÖ –í—ã–±—Ä–∞–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã ${i + 1}: ${selectionResult.selectedVideo.id}`);
        } else {
          // Fallback –Ω–∞ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ
          selectedVideos.push({
            scene: scene,
            selectedVideo: videosWithKeywords[0],
            reasoning: 'Fallback –Ω–∞ –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤–∏–¥–µ–æ',
            allOptions: videosWithKeywords
          });
          console.log(`‚ö†Ô∏è Fallback –Ω–∞ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ü–µ–Ω—ã ${i + 1}`);
        }
      }

      // –≠—Ç–∞–ø 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ
      console.log(`\nüéµ –≠–¢–ê–ü 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs`);
      const fullVoiceoverText = script.scenes.map(scene => scene.voiceoverText).join(' ');
      
      const audioResult = await this.elevenLabsService.generateAndSaveVoiceover(
        fullVoiceoverText,
        videoId,
        language
      );

      if (!audioResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: ${audioResult.error}`);
      }

      console.log(`‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ: ${audioResult.filename}`);

      // –≠—Ç–∞–ø 5: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Creatomate
      console.log(`\nüé¨ –≠–¢–ê–ü 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Creatomate`);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Creatomate
      const scenesForCreatomate = selectedVideos.map(sceneData => ({
        scene: sceneData.scene,
        selectedVideo: {
          ...sceneData.selectedVideo,
          videoUrl: this.pexelsService.getVideoFileUrl(sceneData.selectedVideo)
        }
      }));

      const creatomateResult = await this.creatomateService.createVideo(
        scenesForCreatomate,
        audioResult.filePath, // –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
        options.templateId
      );

      if (!creatomateResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –≤ Creatomate: ${creatomateResult.error}`);
      }

      console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: ${creatomateResult.url}`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const videoData = {
        id: videoId,
        topic: topic,
        language: language,
        title: script.title,
        description: script.description,
        script: script,
        scenes: selectedVideos,
        audio: {
          filename: audioResult.filename,
          filePath: audioResult.filePath,
          fileSize: audioResult.fileSize,
          generatedAt: audioResult.generatedAt
        },
        video: {
          url: creatomateResult.url,
          status: creatomateResult.status,
          createdAt: creatomateResult.createdAt
        },
        pipeline: {
          totalDuration: Date.now() - startTime,
          stages: {
            scriptGeneration: 'completed',
            videoSearch: 'completed',
            videoSelection: 'completed',
            audioGeneration: 'completed',
            videoCreation: 'completed'
          }
        },
        createdAt: new Date().toISOString()
      };

      await this.dataService.saveVideo(videoData);

      console.log(`\nüéâ –ü–ê–ô–ü–õ–ê–ô–ù –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!`);
      console.log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Math.round((Date.now() - startTime) / 1000)} —Å–µ–∫—É–Ω–¥`);
      console.log(`üé¨ –í–∏–¥–µ–æ: ${creatomateResult.url}`);

      return {
        success: true,
        videoId: videoId,
        videoData: videoData,
        videoUrl: creatomateResult.url,
        audioUrl: audioResult.filePath,
        duration: Date.now() - startTime
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: ${error.message}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const errorData = {
        id: videoId,
        topic: topic,
        language: language,
        error: error.message,
        pipeline: {
          totalDuration: Date.now() - startTime,
          stages: {
            scriptGeneration: 'failed',
            videoSearch: 'failed',
            videoSelection: 'failed',
            audioGeneration: 'failed',
            videoCreation: 'failed'
          }
        },
        createdAt: new Date().toISOString()
      };

      await this.dataService.saveVideo(errorData);

      return {
        success: false,
        error: error.message,
        videoId: videoId
      };
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–ª—è –≤–∏–¥–µ–æ
  generateVideoId() {
    return 'video_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  async checkAllServices() {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...`);
    
    const checks = {
      perplexity: await this.perplexityService.checkAvailability(),
      elevenlabs: await this.elevenLabsService.checkAvailability(),
      pexels: await this.pexelsService.checkAvailability(),
      creatomate: await this.creatomateService.checkAvailability()
    };

    const allAvailable = Object.values(checks).every(status => status === true);
    
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:`);
    console.log(`  Perplexity: ${checks.perplexity ? '‚úÖ' : '‚ùå'}`);
    console.log(`  ElevenLabs: ${checks.elevenlabs ? '‚úÖ' : '‚ùå'}`);
    console.log(`  Pexels: ${checks.pexels ? '‚úÖ' : '‚ùå'}`);
    console.log(`  Creatomate: ${checks.creatomate ? '‚úÖ' : '‚ùå'}`);
    
    return {
      allAvailable,
      services: checks
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ –ø–æ ID
  async getVideoStatus(videoId) {
    try {
      const video = await this.dataService.getVideoById(videoId);
      
      if (!video) {
        return {
          success: false,
          error: '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        };
      }

      return {
        success: true,
        video: video,
        status: video.pipeline?.stages || {}
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }
}

module.exports = VideoPipelineService;
