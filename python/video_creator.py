#!/usr/bin/env python3
"""
ShortGPT Video Creator
–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è ShortGPT
"""

import sys
import json
import os
import traceback
from pathlib import Path

def create_video(script_text, video_id, config):
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    
    Args:
        script_text: —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
        video_id: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≤–∏–¥–µ–æ
        config: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (API –∫–ª—é—á–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
    
    Returns:
        dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
    """
    try:
        # –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
        from PIL import Image, ImageDraw, ImageFont
        import subprocess
        import tempfile
        
        print(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è ID: {video_id}")
        print(f"üìù –î–ª–∏–Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞: {len(script_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        project_root = Path(__file__).parent.parent
        output_dir = project_root / "data" / "videos" / video_id
        output_dir.mkdir(parents=True, exist_ok=True)
        
        print("üé® –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
        # –†–∞–∑–º–µ—Ä—ã –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ (TikTok/Shorts)
        width, height = 1080, 1920
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new('RGB', (width, height), color=(30, 30, 30))
        draw = ImageDraw.Draw(img)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
        try:
            font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 50)
        except:
            try:
                font = ImageFont.truetype("/System/Library/Fonts/Helvetica.ttc", 50)
            except:
                font = ImageFont.load_default()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        text = script_text[:200] + "..." if len(script_text) > 200 else script_text
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        words = text.split()
        lines = []
        current_line = []
        
        for word in words:
            test_line = ' '.join(current_line + [word])
            bbox = draw.textbbox((0, 0), test_line, font=font)
            text_width = bbox[2] - bbox[0]
            
            if text_width <= width - 100:
                current_line.append(word)
            else:
                if current_line:
                    lines.append(' '.join(current_line))
                    current_line = [word]
                else:
                    lines.append(word)
        
        if current_line:
            lines.append(' '.join(current_line))
        
        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
        y_offset = (height - len(lines) * 60) // 2
        for line in lines[:10]:  # –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–æ–∫
            bbox = draw.textbbox((0, 0), line, font=font)
            text_width = bbox[2] - bbox[0]
            x = (width - text_width) // 2
            draw.text((x, y_offset), line, fill='white', font=font)
            y_offset += 60
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_path = output_dir / f"{video_id}.png"
        img.save(image_path)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é FFmpeg
        video_path = output_dir / f"{video_id}.mp4"
        
        # –ö–æ–º–∞–Ω–¥–∞ FFmpeg –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ffmpeg_cmd = [
            'ffmpeg',
            '-loop', '1',
            '-i', str(image_path),
            '-c:v', 'libx264',
            '-t', '10',  # 10 —Å–µ–∫—É–Ω–¥
            '-pix_fmt', 'yuv420p',
            '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª
            str(video_path)
        ]
        
        print(f"üé¨ –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é FFmpeg...")
        result = subprocess.run(ffmpeg_cmd, capture_output=True, text=True)
        
        if result.returncode != 0:
            raise Exception(f"FFmpeg error: {result.stderr}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_path.unlink()
        
        print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {video_path}")
        
        return {
            'status': 'success',
            'video_path': str(video_path),
            'video_id': video_id,
            'file_size': os.path.getsize(video_path),
            'message': '–ü—Ä–æ—Å—Ç–æ–µ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ'
        }
        
    except ImportError as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫: {str(e)}\n"
        error_msg += "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pip install -r requirements.txt"
        return {
            'status': 'error',
            'error': error_msg,
            'video_id': video_id
        }
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ: {str(e)}\n"
        error_msg += f"Traceback: {traceback.format_exc()}"
        print(f"‚ùå {error_msg}")
        return {
            'status': 'error',
            'error': error_msg,
            'video_id': video_id
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ Node.js"""
    try:
        # –ß—Ç–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–∑ Node.js
        if len(sys.argv) < 4:
            print(json.dumps({
                'status': 'error',
                'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python video_creator.py <config_path> <script_text> <video_id>'
            }))
            sys.exit(1)
        
        config_path = sys.argv[1]
        script_text = sys.argv[2]
        video_id = sys.argv[3]
        
        print(f"üîß –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑: {config_path}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        result = create_video(script_text, video_id, config)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Node.js
        print(json.dumps(result, ensure_ascii=False, indent=2))
        
    except Exception as e:
        error_result = {
            'status': 'error',
            'error': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}',
            'traceback': traceback.format_exc()
        }
        print(json.dumps(error_result, ensure_ascii=False, indent=2))
        sys.exit(1)

if __name__ == '__main__':
    main()
